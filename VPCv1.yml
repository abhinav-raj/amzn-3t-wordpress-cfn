Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2



########################################################################################################    
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      #EnableDnsSupport: 'false'
      #EnableDnsHostnames: 'false'
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: GovClientVPC
    
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: "Public Subnet 1"
      - Key: subnet-type
        Value: Public
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: "Public Subnet 2"
      - Key: subnet-type
        Value: Public
  
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: Name
        Value: "Web Subnet 1"
      - Key: subnet-type
        Value: Private
      
  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: Name
        Value: "Web Subnet 2"
      - Key: subnet-type
        Value: Private
  #RouteTable and associate
  #Public
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "Public Route"
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet1
        #Ref: PublicSubnet2
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCIGW
    DependsOn:
      - VPCGW
  
  #InternetGateway IgW defined
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPCIGW

  #VPCGatewayAttachment binds VPC and IgW
  VPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId:        #The ID of the internet gateway.
        Ref: VPCIGW
      #VpnGatewayId: String     You must specify either InternetGatewayId or VpnGatewayId, but not both.
  #PrivateRT
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      #InstanceId: String
      #PublicIpv4Pool: String
      Tags: 
        - Key: Name
          Value: NATElasticIP1
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: #!GetAtt NatEIP1.AllocationId    #The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        Fn::GetAtt:
         - NatEIP1
         - AllocationId
      SubnetId: #!Ref PublicSubnet1                  #The public subnet in which to create the NAT gateway
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: NatGateway1
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      # DestinationIpv6CidrBlock: String
      # EgressOnlyInternetGatewayId: String
      # GatewayId: String
      # InstanceId: String
      # NetworkInterfaceId: String
      # TransitGatewayId: String
      # VpcPeeringConnectionId: String
  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC
  
  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
  NatRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable2 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC


  #instances created from here     
  #EC2 bastian 
  BastianInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref AmiID #alternate way to refer. 
      #ImageId: ami-02354e95b39ca8dec #Amazon Linux 2 AMI (HVM), SSD Volume Type64-bit Arm comes with five years support. It provides Linux kernel 4.14 tuned for optimal performance on Amazon EC2
      InstanceType: t3.medium
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: bastionHost
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'   
  
  
########################################################################################################
Outputs:
  VpcId:
    Value: !Ref MyVPC

  PublicSubnet1:
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Value: !Ref PublicSubnet2
  
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt BastianInstance.PublicIp
  PublicDNS:
    Description: 'Public DNS of EC2 instance'
    Value: !GetAtt BastianInstance.PublicDnsName
  
  # WebServerElasticIP:
  #   Description: 'Elastic IP assigned to bastian instance'
  #   Value: !Ref BastianEIP
  
  


















########################----Testing-Code-Dump---------###################
  #private
  # PrivateSubnetRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref MyVPC
  #     Tags:
  #       - Key: Name
  #         Value: "Private Route"
        
  # PrivateSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateSubnetRouteTable
  #     SubnetId:
  #       Ref: PrivateSubnet1
  # PrivateSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateSubnetRouteTable
  #     SubnetId:
  #       Ref: PrivateSubnet2
  # 
  #BastianEIP: #got get DNS?
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     InstanceId: !Ref BastianInstance
  #     Tags:
  #       - Key: Name
  #         Value: GovProjectElasticIP