#VersionSnapshot22working, snapshot23 for EFS mount to support ALB ref and stored data
#Problem and ProjectTracking
  #The agency has decided to move forward with partnering with AWS. The first project is to migrate the National Park Weather Service from on-prem to AWS. The Weather Service is a wordpress site running on a Linux os. The weather service will be used mostly by east coast National Park visitors. The service must be highly available and able to respond to usage peaks and slowdowns. The administrators need a secure way to access the servers without exposing ssh to the world. The administrators are also looking to reduce their administrative overhead in regard to their database. They would like to limit or reduce the need to patch database servers. The administrators also need to be notified of any server failures.
  # Done: 1. OS baseline image running Amazon Linux 2
  # !Done: 2. Encrypt data at rest and in transit
  # Done: 3. Minimum of 3 servers available at all time during normal business hours and 1 server during off hours
  # Done: 4. An application load balancer for public accessibility to the application
  # Done: 5. Real-time monitoring of host failures
  # Done: 6. Access logs available for analysis for up to a month
  # Done: 7. Would like the sample code to be written in CloudFormation

  #  Done: Application - Wordpress (Amazon Linux 2 t3.medium)
  #  Done: Backend - Aurora - MySQL
  #  Done: Logging: CloudWatch (App logs go to CloudWatch)
  #  Done: Notification - SNS Receive Notification for threshold involving load balancers Autoscaling

  #EXTRACREDIT
  # !Done: DevOps Pipeline, 
  #  Done: ElastiCache


  #ToDo
  #  !Done: EFS
  # !Done: 2. Encrypt data at rest and in transit
  # !Done: DevOps Pipeline, 


  ##---------------------------------------------------------------------------------------------------------------
  #####ElastiCacheWorking Here
  #LC in Autoscaling working here--> webserver lauching, apache insaliig and rds connecting. 
  #Log- Autoscale SchdeuleWork checking Done
  #Testing SNS for autoscaling

Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the bastion & Web instances EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  ElastiCacheNodeType:
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.t3.micro
      - cache.t3.small
      - cache.t3.medium
      - cache.m4.large
      - cache.m4.xlarge
      - cache.m4.2xlarge
      - cache.m5.large
      - cache.m5.xlarge
      - cache.m5.2xlarge
    ConstraintDescription: Must be a valid Amazon ElastiCache node type.
    Default: cache.t2.medium
    Description: The Amazon ElastiCache cluster node type.
    Type: String  
  
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.

  DatabaseEncrpytedBoolean:
    AllowedValues:
      - true
      - false
    Default: True
    Description: Indicates whether the DB instances in the cluster are encrypted.
    Type: String
  # DatabaseCmk:
  #   Description: AWS KMS Customer Master Key (CMK) to encrypt database cluster
  #   Type: String
  # 
    # MultiAZDatabase:
    #   Default: 'false'
    #   Description: Create a Multi-AZ MySQL Amazon RDS database instance
    #   Type: String
    #   AllowedValues:
    #     - 'true'
    #     - 'false'
    #   ConstraintDescription: must be either true or false.
    # DBAllocatedStorage:
    #   Default: '5'
    #   Description: The size of the database (Gb)
    #   Type: Number
    #   MinValue: '5'
    #   MaxValue: '1024'
    #   ConstraintDescription: must be between 5 and 1024Gb.
  # Subnets:
  #   Type: 'List<AWS::EC2::Subnet::Id>'
  #   Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  #   ConstraintDescription: >-
  #     must be a list of at least two existing subnets associated with at least
  #     two different availability zones. They should be residing in the selected
  #     Virtual Private Cloud.
  
  DatabaseInstanceType:
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge
    ConstraintDescription: Must be a valid RDS instance class.
    Default: db.t2.medium
    Description: The Amazon RDS database instance class.
    Type: String
  DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    MaxLength: 16
    MinLength: 8
    Type: String
    Default: wordpress
  DatabaseMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-    
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
    Default: wordpress
  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String
    Default: wordpress

########################################################################################################    
Resources:
###-----------------VPC-------------------------###############  
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true                                        #instances launched in the VPC get DNS hostnames
      EnableDnsHostnames: true                                      #whether the DNS resolution is supported
      Tags:
        - Key: Name
          Value: GovClientVPC
  
###-----------------Logging-------------------------###############  
  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn                         #ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.
      # LogDestination: String                                                      #destination to which the flow log data is to be published. Can be cloudwatch or S3
      LogGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-FlowLog' ] ]
      ResourceId: !Ref MyVPC
      ResourceType: VPC                                                             #Allowed values: NetworkInterface | Subnet | VPC
      TrafficType: ALL                                                              #Allowed values: ACCEPT | ALL | REJECT
      #LogDestinationType                                                           # Allowed values: cloud-watch-logs | s3, if logDestination--s3, dont use me

  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90
  
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'

#-----------------------Subnet Block-----------------------------   
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet 1"
        - Key: subnet-type
          Value: Public  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet 2"
        - Key: subnet-type
          Value: Public
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet 3"
        - Key: subnet-type
          Value: Public
  
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.21.0/24
      AvailabilityZone: !GetAtt [ "PublicSubnet1", "AvailabilityZone" ]
      Tags:
        - Key: Name
          Value: "Web Subnet 1"
        - Key: subnet-type
          Value: Private  
  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.22.0/24
      AvailabilityZone: !GetAtt [ "PublicSubnet2", "AvailabilityZone" ]
      Tags:
        - Key: Name
          Value: "Web Subnet 2"
        - Key: subnet-type
          Value: Private
  WebSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.23.0/24
      AvailabilityZone: !GetAtt [ "PublicSubnet3", "AvailabilityZone" ]
      Tags:
        - Key: Name
          Value: "Web Subnet 3"
        - Key: subnet-type
          Value: Private

  DataSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt [ "PublicSubnet1", "AvailabilityZone" ]
      CidrBlock: 10.0.101.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataSubnet1 
        - Key: SubnetType
          Value: Private
      VpcId: !Ref MyVPC
  DataSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt [ "PublicSubnet2", "AvailabilityZone" ]
      CidrBlock: 10.0.102.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataSubnet2 
        - Key: SubnetTypes
          Value: Private
      VpcId: !Ref MyVPC
  DataSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt [ "PublicSubnet3", "AvailabilityZone" ]
      CidrBlock: 10.0.103.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataSubnet3 
        - Key: SubnetTypes
          Value: Private
      VpcId: !Ref MyVPC
  
#----------------------------RouteTable and associate------------------------------------------
  #publicEIP
  # WebServerEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     InstanceId: !Ref WebServerInstance
  #Public
  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCIGW
    DependsOn:
      - VPCGW

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "Public Route"
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet1
        #Ref: PublicSubnet2
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet3
  
  
  #PrivateRT
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      #InstanceId: String
      #PublicIpv4Pool: String
      Tags: 
        - Key: Name
          Value: NATElasticIP1
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: #!GetAtt NatEIP1.AllocationId    #The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        Fn::GetAtt:
         - NatEIP1
         - AllocationId
      SubnetId: #!Ref PublicSubnet1                  #The public subnet in which to create the NAT gateway
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway1
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      # DestinationIpv6CidrBlock: String
      # EgressOnlyInternetGatewayId: String
      # GatewayId: String
      # InstanceId: String
      # NetworkInterfaceId: String
      # TransitGatewayId: String
      # VpcPeeringConnectionId: String
  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC
  
  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: NATElasticIP2
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NatGateway2
  NatRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable2 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC

  NatEIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: NATElasticIP3
  NatGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: !GetAtt NatEIP3.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: NatGateway3
  NatRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
  NatRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable3 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC
 
  WebSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref WebSubnet1
  WebSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref WebSubnet2
  WebSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable3
      SubnetId: !Ref WebSubnet3

  DataSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref DataSubnet1
  DataSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref DataSubnet2
  DataSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable3
      SubnetId: !Ref DataSubnet3
  
###-------------IgW and binding-------------------------------------------------------------###
  #InternetGateway IgW defined
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPCIGW

  #VPCGatewayAttachment binds VPC and IgW
  VPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId:        #The ID of the internet gateway.
        Ref: VPCIGW
      #VpnGatewayId: String     You must specify either InternetGatewayId or VpnGatewayId, but not both.
  
#-------------SecurityGroups Block-------------------------------------
  BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to client host- security group for Bastion instances
        VpcId:
          Ref: MyVPC
        GroupName: BastionSecurityGroup
        SecurityGroupIngress:
          # - CidrIp: 0.0.0.0/0
          #   FromPort: '80'
          #   IpProtocol: tcp
          #   ToPort: '80'
          - CidrIp: !Ref SSHLocation
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22  
        Tags:
          - Key: Name
            Value: BastionSecurityGroup
  
  PublicAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      GroupName: PublicAlb_SecurityGroup
      SecurityGroupIngress:             #The inbound rules associated with the security group
        - IpProtocol: tcp               #HTTP, ipv4
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp               #HTTPS 
          #   FromPort: 443
          #   ToPort: 443
          #   CidrIp: 0.0.0.0/0
          # CidrIpv6: String
          # Description: String
          # SourcePrefixListId: String
          # SourceSecurityGroupId: String
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String  
      VpcId:
        !Ref MyVPC    
      Tags:
        - Key: Name
          Value: PublicAlbSecurityGroup   
  
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Amazon RDS cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306              #port for Aurora/MySQL
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      VpcId:
        !Ref MyVPC
      Tags:
        - Key: Name
          Value: DatabaseSG
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress: #Enable HTTP access via port 80'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:  !Ref PublicAlbSecurityGroup
          # SourceSecurityGroupId: !Select 
          #   - 0
          #   - !GetAtt 
          #     - PublicApplicationLoadBalancer
          #     - SecurityGroups
          #CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp     #Enable HTTPs access via port 443'
          #   FromPort: 443
          #   ToPort: 443
          #   SourceSecurityGroupId: !Ref PublicAlbSecurityGroup
        - IpProtocol: tcp     #SSH
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        
        #Note- for Testing
        # - CidrIp: !Ref SSHLocation
        #   FromPort: 22
        #   IpProtocol: tcp
        #   ToPort: 22  
      VpcId:
        !Ref MyVPC 
      Tags:
        - Key: Name
          Value: WebSecurityGroup 
  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId: !Ref WebSecurityGroup
      VpcId:
        !Ref MyVPC
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: MyVPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049  
          SourceSecurityGroupId: !Ref WebSecurityGroup
#-------------instances created from here ------------------------------    
  #EC2 bastian 
  BastianInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref AmiID #alternate way to refer using SSM. 
      #ImageId: ami-02354e95b39ca8dec #Amazon Linux 2 AMI (HVM), SSD Volume Type64-bit Arm comes with five years support. It provides Linux kernel 4.14 tuned for optimal performance on Amazon EC2
      InstanceType: t3.medium

      KeyName:
        Ref: KeyName
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: bastionHost
  
#####------------AutoScaling, Launch Config, Scaling Plan------------######################
      
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email

  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - ElasticFileSystemMountTarget0
      - ElasticFileSystemMountTarget1 
      - ElasticFileSystemMountTarget2
    Properties:
      AutoScalingGroupName: Mb3ASG
      VPCZoneIdentifier: 
        - !Ref WebSubnet1
        - !Ref WebSubnet2
        - !Ref WebSubnet3
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '10'
      MetricsCollection: 
        - Granularity: "1Minute"
          # Metrics:                                              #If dont specify, all metrics are enabled
          #   - "GroupPendingInstances"
          #   - "GroupTerminatingInstances"
      DesiredCapacity: '3'
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroup
    
  # AutoScalingPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AdjustmentType: ChangeInCapacity
  #     AutoScalingGroupName: !Ref WebServerGroup
  #     Cooldown: '60'
  #     PolicyType: SimpleScaling
  #     ScalingAdjustment: 1

  #Scaling based on CPU
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: -1
  #Scaling based on time
  BusinessHourSchedule: 
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: 
        Ref: "WebServerGroup"
      MaxSize: 10
      MinSize: 3
      Recurrence: "0 7 * * *"
  OffHourSchedule: 
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: 
        Ref: "WebServerGroup"
      MaxSize: 2
      MinSize: 1
      Recurrence: "0 19 * * *"
  
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 50% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: LessThanThreshold


  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'      
    Properties:
      #IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref AmiID
      InstanceType: t3.medium
      KeyName:
        Ref: KeyName
      SecurityGroups:                                      #A list that contains the security groups to assign to the instances in the Auto Scaling group
        - !Ref WebSecurityGroup
      UserData:
        Fn::Base64: !Sub  |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          yum install php-mysql -y
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;

          
          amazon-linux-extras install -y php7.2
          yum install gcc-c++ -y
          yum install wget -y
          wget https://elasticache-downloads.s3.amazonaws.com/ClusterClient/PHP-7.0/latest-64bit
          tar -zxvf latest-64bit
          mv artifact/amazon-elasticache-cluster-client.so /usr/lib64/php/modules/
          echo "extension=amazon-elasticache-cluster-client.so" | sudo tee --append /etc/php.d/50-memcached.ini

          yum install amazon-efs-utils -y
          cd /var/www
          mount -t efs -o tls ${EFSFileSystem}:/ /var/www/html/
          cd /var/www/html
          
          wget https://wordpress.org/wordpress-5.4.1.tar.gz
          tar -xzf wordpress-5.4.1.tar.gz
          cp -r wordpress/* /var/www/html/
          rm -rf wordpress
          rm -rf wordpress-5.4.1.tar.gz
          chmod -R 755 wp-content
          chown -R apache:apache wp-content
          systemctl start httpd
          systemctl enable httpd
          
          
          cat << 'EOF' > /var/www/html/wp-config.php
          <?php
          /**
            * The base configuration for WordPress
            *
            * The wp-config.php creation script uses this file during the
            * installation. You don't have to use the web site, you can
            * copy this file to "wp-config.php" and fill in the values.
            *
            * This file contains the following configurations:
            *
            * * MySQL settings
            * * Secret keys
            * * Database table prefix
            * * ABSPATH
            *
            * @link https://wordpress.org/support/article/editing-wp-config-php/
            *
            * @package WordPress
            */

            // ** MySQL settings - You can get this info from your web host ** //
            /** The name of the database for WordPress */
              define( 'DB_NAME', '${DatabaseName}' );
            /** MySQL database username */
              define( 'DB_USER', '${DatabaseMasterUsername}' );
            /** MySQL database password */
              define( 'DB_PASSWORD', '${DatabaseMasterPassword}' );
            /** MySQL hostname */
              define( 'DB_HOST', '${RDSCluster.Endpoint.Address}' );
            /** Database Charset to use in creating database tables. */
              define( 'DB_CHARSET', 'utf8mb4' );
            /** The Database Collate type. Don't change this if in doubt. */
              define( 'DB_COLLATE', '' );
            /**#@+
              * Authentication Unique Keys and Salts.
              *
              * Change these to different unique phrases!
              * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
              * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
              *
              * @since 2.6.0
              */
            define( 'AUTH_KEY',         'y6!CxRaZV+TFMr3O)^T a`h#w_z~BTHagddJ2QNqVI)<PQ#%?k1*O*/p76>&2VNz' );
            define( 'SECURE_AUTH_KEY',  'Hhdc>3^U|%$H`KV1.K0L_/+%guY,}|9[y2B&Z21Pj6dn11XWc{n$;M1Omdh]/|jb' );
            define( 'LOGGED_IN_KEY',    '-X~.ap8nJ6EZ:ZY,bH-u$,:VXYp{2AwBSkAIs*0s<Ii5::Vq?9(L$ga^T=i!0>6s' );
            define( 'NONCE_KEY',        'cDR0zoYrH$O4vnU+C+CTw>3SSK<9,srvOEa=~_&]R/TkXaHC;2O6;!:K?1mS[!ix' );
            define( 'AUTH_SALT',        'qAdAOyoj7__liYla6F+.YwntKojNhm]xt6@K22KuN>4{gTX:}l-lA6v4gUc+(s_h' );
            define( 'SECURE_AUTH_SALT', 'q^6sVq-p&8Lu_YfPnP{ac5#*(?N*jxC<,;@aH}>!E:1q?o7 u8 oC]S/^6gC_+L<' );
            define( 'LOGGED_IN_SALT',   '3V (2HpFP(+8xng>@@|^.f+,Dvs{6)ugiV7bk1[,X&$Wx.y1D8L!9xC=^;MS&[hr' );
            define( 'NONCE_SALT',       ')==*:UPNl:rJ6Nnb*.A4N>*.KaI)[>)k+H|6kXqys#H`x);_SKtDp6:rV{n)|_{,' );

            /**#@-*/
            /**
              * WordPress Database Table prefix.
              *
              * You can have multiple installations in one database if you give each
              * a unique prefix. Only numbers, letters, and underscores please!
              */
            $table_prefix = 'wp_';

            /**
              * For developers: WordPress debugging mode.
              *
              * Change this to true to enable the display of notices during development.
              * It is strongly recommended that plugin and theme developers use WP_DEBUG
              * in their development environments.
              *
              * For information on other constants that can be used for debugging,
              * visit the documentation.
              *
              * @link https://wordpress.org/support/article/debugging-in-wordpress/
              */
            define( 'WP_DEBUG', false );
            define('FS_METHOD','direct');

            /* That's all, stop editing! Happy publishing. */
            /** Absolute path to the WordPress directory. */
            if ( ! defined( 'ABSPATH' ) ) {
              define( 'ABSPATH', __DIR__ . '/' );
            }
            /** Sets up WordPress vars and included files. */
            require_once ABSPATH . 'wp-settings.php';    
    DependsOn: RDSCluster
   
#-------------------IAM---------------------------------------
  SSMIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # WebServerInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref SSMIAMRole
####----------------LoadBalancer-------------------------------------------------------####
  PublicApplicationLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3

      SecurityGroups:
      - !Ref PublicAlbSecurityGroup                         #The IDs of the security groups for the load balancer.
      Tags:
      - Key: Name
        Value:  'Public ALB' 

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicAlbTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  PublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      #HealthCheckPath: /wp-login.php
      HealthCheckPath: /wp-admin/install.php
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: 'ALB-TargetGroup'
      Port: 80                      #The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. 
      Protocol: HTTP                #he protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS.
      #HealthCheckPort
      #HealthCheckProtocol
      Tags:
        - Key: Name
          Value: 'ALB-TargetGroup'
      UnhealthyThresholdCount: 5    #The number of consecutive health check failures required before considering a target unhealthy. For target groups with a protocol of HTTP or HTTPS, the default is 2.
      VpcId: !Ref MyVPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

##################------------------DATABASE-----------------------------###############################
  
    
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterParameterGroupName: 
        Ref: RDSDBClusterParameterGroup
      BackupRetentionPeriod: 30
      DatabaseName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      # KmsKeyId:
      #   !If [ UseAWS-ManagedCMK, !Ref 'AWS::NoValue', !Ref DatabaseCmk ]
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Port: 3306
      StorageEncrypted: !Ref DatabaseEncrpytedBoolean
      # SnapshotIdentifier: !If [ NoSnapshot, !Ref 'AWS::NoValue', !Ref DatabaseRestoreSnapshot]
      Tags:
        - Key: Name
          Value: RDSCluster
      VpcSecurityGroupIds:
      - !Ref DatabaseSecurityGroup  
  
  RDSDBClusterParameterGroup: # Error Msg- The Parameter Group default.aurora5.6 with DBParameterGroupFamily aurora5.6 cannot be used for this instance. Please use a Parameter Group with DBParameterGroupFamily aurora-mysql5.7 (Service: AmazonRDS; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 147358c4-1e3b-419e-90c9-7a64d7902f46)
    Properties: 
      Description: "CloudFormation Sample Aurora Cluster Parameter Group"
      Family: aurora-mysql5.7 
      Parameters: 
        time_zone: US/Eastern
    Type: "AWS::RDS::DBClusterParameterGroup"
  
  RDSDBParameterGroup: 
    Properties: 
      Description: "CloudFormation Sample Aurora Parameter Group"
      Family: aurora-mysql5.7 
      
    Type: "AWS::RDS::DBParameterGroup"
  
  DatabaseInstance1:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AvailabilityZone: 
        Fn::GetAtt:
          - DataSubnet1
          - AvailabilityZone
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      Tags:
        - Key: Name
          Value: DatabaseInstance1
  
  DatabaseInstance2:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AvailabilityZone: 
        Fn::GetAtt:
          - DataSubnet2
          - AvailabilityZone
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      Tags:
        - Key: Name
          Value: DatabaseInstance2
  DatabaseInstance3:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AvailabilityZone: 
        Fn::GetAtt:
          - DataSubnet3
          - AvailabilityZone
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      Tags:
        - Key: Name
          Value: DatabaseInstance3
  
  DataSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Database Subnet Group for WordPress
      SubnetIds:
        - !Ref DataSubnet1
        - !Ref DataSubnet2
        - !Ref DataSubnet3
        #- !Ref DataSubnet4
      Tags:
        - Key: Name
          Value: DataSubnetGroup

##############-------------ElastiCache--------------------#############
  ElastiCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AZMode: cross-az
      CacheNodeType: !Ref ElastiCacheNodeType
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      Engine: memcached
      NumCacheNodes: 3
      Tags:
        - Key: Name
          Value: GovRDSElastiCacheCluster
      VpcSecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup  

  ElastiCacheSubnetGroup: 
    Type: AWS::ElastiCache::SubnetGroup
    Properties: 
      Description: ElastiCache Subnet Group for WordPress
      SubnetIds: 
        - !Ref DataSubnet1
        - !Ref DataSubnet2
        - !Ref DataSubnet3

##############------------------EFS-----------------------#############
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true                       #!Ref EncrpytedBoolean
      PerformanceMode: generalPurpose
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      FileSystemTags:
        - Key: Name
          Value:  myEFSvolume
  ElasticFileSystemMountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFSFileSystem
      SubnetId:
        Ref: WebSubnet1
      SecurityGroups:
        - Ref: MountTargetSecurityGroup
  
  ElasticFileSystemMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
      SubnetId: !Ref WebSubnet2
  
  ElasticFileSystemMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
      SubnetId: !Ref WebSubnet3        
#######################---------------OutPuts--------###############################################
Outputs:

  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - PublicApplicationLoadBalancer
          - DNSName
  VpcId:
    Value: !Ref MyVPC

  PublicSubnet1:
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Value: !Ref PublicSubnet2
  
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt BastianInstance.PublicIp
  PublicDNS:
    Description: 'Public DNS of EC2 instance'
    Value: !GetAtt BastianInstance.PublicDnsName
  
  # WebServerElasticIP:
  #   Description: 'Elastic IP assigned to bastian instance'
  #   Value: !Ref BastianEIP
  
  WebSubnet1:
    Value: !Ref WebSubnet1
  WebSubnet2:
    Value: !Ref WebSubnet2
  BastionSecurityGroup:
    Value: !Ref BastionSecurityGroup
  PublicAlbSecurityGroup:
    Value: !Ref PublicAlbSecurityGroup
  WebSecurityGroup:
    Value: !Ref WebSecurityGroup
  
  # WebServerPublicDNS:
  #   Description: 'Public DNS of EC2 instance'
  #   Value: !GetAtt WebServerInstance.PublicDnsName

  # WebServerElasticIP:
  #   Description: 'Elastic IP assigned to EC2'
  #   Value: !Ref WebServerEIP

  # WebsiteURL:
  #   Value: !Sub http://${WebServerEIP}
  #   Description: Application URL

  DBEndPoint:
    Value: !GetAtt RDSCluster.Endpoint.Address

  

  FileSystem:
    Value: !Ref EFSFileSystem
  FileSystemId:
    Value: !GetAtt EFSFileSystem.FileSystemId

  ElastiCacheEP:
    Value: !Ref ElastiCacheCluster

