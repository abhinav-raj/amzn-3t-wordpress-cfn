Parameters:
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the bastion & Web instances EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  
  DatabaseEncrpytedBoolean:
    AllowedValues:
      - true
      - false
    Default: True
    Description: Indicates whether the DB instances in the cluster are encrypted.
    Type: String
  # DatabaseCmk:
  #   Description: AWS KMS Customer Master Key (CMK) to encrypt database cluster
  #   Type: String
  # 
    # MultiAZDatabase:
    #   Default: 'false'
    #   Description: Create a Multi-AZ MySQL Amazon RDS database instance
    #   Type: String
    #   AllowedValues:
    #     - 'true'
    #     - 'false'
    #   ConstraintDescription: must be either true or false.
    # DBAllocatedStorage:
    #   Default: '5'
    #   Description: The size of the database (Gb)
    #   Type: Number
    #   MinValue: '5'
    #   MaxValue: '1024'
    #   ConstraintDescription: must be between 5 and 1024Gb.
  # Subnets:
  #   Type: 'List<AWS::EC2::Subnet::Id>'
  #   Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  #   ConstraintDescription: >-
  #     must be a list of at least two existing subnets associated with at least
  #     two different availability zones. They should be residing in the selected
  #     Virtual Private Cloud.
  
  DatabaseInstanceType:
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge
    ConstraintDescription: Must be a valid RDS instance class.
    Default: db.t2.medium
    Description: The Amazon RDS database instance class.
    Type: String
  DatabaseMasterUsername:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master username.
    ConstraintDescription: Must contain only alphanumeric characters (minimum 8; maximum 16).
    MaxLength: 16
    MinLength: 8
    Type: String
    Default: wordpress
  DatabaseMasterPassword:
    AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-    
    Description: The Amazon RDS master password.
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
    Default: wordpress
  DatabaseName:
    AllowedPattern: ^([a-zA-Z0-9]*)$
    Description: The Amazon RDS master database name.
    Type: String
    Default: wordpress


########################################################################################################    
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      #EnableDnsSupport: 'false'
      #EnableDnsHostnames: 'false'
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: GovClientVPC
  VpcFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      LogGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-FlowLog' ] ]
      ResourceId: !Ref MyVPC
      ResourceType: VPC
      TrafficType: ALL
  VpcFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'

#-----------------------Subnet Block-----------------------------   
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: "Public Subnet 1"
      - Key: subnet-type
        Value: Public  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: "Public Subnet 2"
      - Key: subnet-type
        Value: Public
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: 
        Fn::Select: 
          - 3
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: "Public Subnet 3"
      - Key: subnet-type
        Value: Public
  
  WebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.21.0/24
      AvailabilityZone: !GetAtt [ "PublicSubnet1", "AvailabilityZone" ]
      Tags:
      - Key: Name
        Value: "Web Subnet 1"
      - Key: subnet-type
        Value: Private  
  WebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.22.0/24
      AvailabilityZone: !GetAtt [ "PublicSubnet2", "AvailabilityZone" ]
      Tags:
      - Key: Name
        Value: "Web Subnet 2"
      - Key: subnet-type
        Value: Private
  WebSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock: 10.0.23.0/24
      AvailabilityZone: !GetAtt [ "PublicSubnet3", "AvailabilityZone" ]
      Tags:
      - Key: Name
        Value: "Web Subnet 3"
      - Key: subnet-type
        Value: Private

  DataSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt [ "PublicSubnet1", "AvailabilityZone" ]
      CidrBlock: 10.0.101.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataSubnet1 
        - Key: SubnetType
          Value: Private
      VpcId: !Ref MyVPC
  DataSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt [ "PublicSubnet2", "AvailabilityZone" ]
      CidrBlock: 10.0.102.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataSubnet2 
        - Key: SubnetTypes
          Value: Private
      VpcId: !Ref MyVPC
  DataSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !GetAtt [ "PublicSubnet3", "AvailabilityZone" ]
      CidrBlock: 10.0.103.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DataSubnet3 
        - Key: SubnetTypes
          Value: Private
      VpcId: !Ref MyVPC
  
  
#----------------------------RouteTable and associate------------------------------------------
  #publicEIP
  # WebServerEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     InstanceId: !Ref WebServerInstance
  #Public
  PublicSubnetDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCIGW
    DependsOn:
      - VPCGW

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "Public Route"
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet1
        #Ref: PublicSubnet2
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      SubnetId:
        Ref: PublicSubnet3
  
  
  #PrivateRT
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      #InstanceId: String
      #PublicIpv4Pool: String
      Tags: 
        - Key: Name
          Value: NATElasticIP1
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: #!GetAtt NatEIP1.AllocationId    #The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        Fn::GetAtt:
         - NatEIP1
         - AllocationId
      SubnetId: #!Ref PublicSubnet1                  #The public subnet in which to create the NAT gateway
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: NatGateway1
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      # DestinationIpv6CidrBlock: String
      # EgressOnlyInternetGatewayId: String
      # GatewayId: String
      # InstanceId: String
      # NetworkInterfaceId: String
      # TransitGatewayId: String
      # VpcPeeringConnectionId: String
  NatRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['NatRouteTable1 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC
  
  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: NATElasticIP2
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: NatGateway2
  NatRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  NatRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable2 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC

  NatEIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags: 
        - Key: Name
          Value: NATElasticIP3
  NatGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGW
    Properties:
      AllocationId: !GetAtt NatEIP3.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags:
      - Key: Name
        Value: NatGateway3
  NatRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
  NatRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NatRouteTable3 / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref MyVPC
 
  WebSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref WebSubnet1
  WebSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref WebSubnet2
  WebSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable3
      SubnetId: !Ref WebSubnet3

  DataSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable1
      SubnetId: !Ref DataSubnet1
  DataSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable2
      SubnetId: !Ref DataSubnet2
  DataSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable3
      SubnetId: !Ref DataSubnet3
  
###-------------IgW and binding-------------------------------------------------------------###
  #InternetGateway IgW defined
  VPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPCIGW

  #VPCGatewayAttachment binds VPC and IgW
  VPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId:        #The ID of the internet gateway.
        Ref: VPCIGW
      #VpnGatewayId: String     You must specify either InternetGatewayId or VpnGatewayId, but not both.
  
#-------------SecurityGroups Block-------------------------------------
  BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to client host- security group for Bastion instances
        VpcId:
          Ref: MyVPC
        SecurityGroupIngress:
        # - CidrIp: 0.0.0.0/0
        #   FromPort: '80'
        #   IpProtocol: tcp
        #   ToPort: '80'
        - CidrIp: !Ref SSHLocation
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22  
        Tags:
        - Key: Name
          Value: BastionSecurityGroup
  
  PublicAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      GroupName: PublicAlb_SecurityGroup
      SecurityGroupIngress:             #The inbound rules associated with the security group
        - IpProtocol: tcp               #HTTPS 
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          # CidrIpv6: String
          # Description: String
          # SourcePrefixListId: String
          # SourceSecurityGroupId: String
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
        - IpProtocol: tcp                       #HTTP, ipv4
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref MyVPC    
      Tags:
        - Key: Name
          Value: PublicAlbSecurityGroup   
  
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Amazon RDS cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306              #port for Aurora/MySQL
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      VpcId:
        !Ref MyVPC
      Tags:
        - Key: Name
          Value: DatabaseSG
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress: #Enable HTTP access via port 80'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:  !Ref PublicAlbSecurityGroup
          # SourceSecurityGroupId: !Select 
          #   - 0
          #   - !GetAtt 
          #     - PublicApplicationLoadBalancer
          #     - SecurityGroups
          #CidrIp: 0.0.0.0/0
        - IpProtocol: tcp     #Enable HTTPs access via port 443'
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref PublicAlbSecurityGroup
        - IpProtocol: tcp     #SSH
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        
        #Note- for Testing
        # - CidrIp: !Ref SSHLocation
        #   FromPort: 22
        #   IpProtocol: tcp
        #   ToPort: 22  
      VpcId:
        !Ref MyVPC 
      Tags:
        - Key: Name
          Value: WebSecurityGroup 


  
#-------------instances created from here ------------------------------    
  #EC2 bastian 
  BastianInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref AmiID #alternate way to refer. 
      #ImageId: ami-02354e95b39ca8dec #Amazon Linux 2 AMI (HVM), SSD Volume Type64-bit Arm comes with five years support. It provides Linux kernel 4.14 tuned for optimal performance on Amazon EC2
      InstanceType: t3.medium
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: bastionHost
  
  #Note: its in Public, needs to be in private subnet
  # WebServerInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     #IamInstanceProfile: !Ref WebServerInstanceProfile
  #     ImageId: !Ref AmiID
  #     SubnetId: !Ref PublicSubnet1                        #change ME
  #     InstanceType: t3.medium
  #     KeyName:
  #       Ref: KeyName
  #     SecurityGroupIds:
  #       - !Ref WebSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: webserverInstancePhp
  #     UserData:
  #       Fn::Base64: !Sub  |
  #         #!/bin/bash
  #         yum install httpd php php-mysql -y
  #         amazon-linux-extras install -y php7.2
  #         cd /var/www/html
  #         wget https://wordpress.org/wordpress-5.4.1.tar.gz
  #         tar -xzf wordpress-5.4.1.tar.gz
  #         cp -r wordpress/* /var/www/html/
  #         rm -rf wordpress
  #         rm -rf wordpress-5.4.1.tar.gz
  #         chmod -R 755 wp-content
  #         chown -R apache:apache wp-content
  #         service httpd start
  #         chkconfig httpd on
          
  #         #wp-config.php
  #         cat << 'EOF' > /var/www/html/wp-config.php
  #           <?php
  #           /**
  #             * The base configuration for WordPress
  #             *
  #             * The wp-config.php creation script uses this file during the
  #             * installation. You don't have to use the web site, you can
  #             * copy this file to "wp-config.php" and fill in the values.
  #             *
  #             * This file contains the following configurations:
  #             *
  #             * * MySQL settings
  #             * * Secret keys
  #             * * Database table prefix
  #             * * ABSPATH
  #             *
  #             * @link https://wordpress.org/support/article/editing-wp-config-php/
  #             *
  #             * @package WordPress
  #             */

  #           // ** MySQL settings - You can get this info from your web host ** //
  #           /** The name of the database for WordPress */
  #             define( 'DB_NAME', '${DatabaseName}' );
  #           /** MySQL database username */
  #             define( 'DB_USER', '${DatabaseMasterUsername}' );
  #           /** MySQL database password */
  #             define( 'DB_PASSWORD', '${DatabaseMasterPassword}' );
  #           /** MySQL hostname */
  #             define( 'DB_HOST', '${RDSCluster.Endpoint.Address}' );
  #           /** Database Charset to use in creating database tables. */
  #             define( 'DB_CHARSET', 'utf8mb4' );
  #           /** The Database Collate type. Don't change this if in doubt. */
  #             define( 'DB_COLLATE', '' );
  #           /**#@+
  #             * Authentication Unique Keys and Salts.
  #             *
  #             * Change these to different unique phrases!
  #             * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
  #             * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
  #             *
  #             * @since 2.6.0
  #             */
  #           define( 'AUTH_KEY',         'y6!CxRaZV+TFMr3O)^T a`h#w_z~BTHagddJ2QNqVI)<PQ#%?k1*O*/p76>&2VNz' );
  #           define( 'SECURE_AUTH_KEY',  'Hhdc>3^U|%$H`KV1.K0L_/+%guY,}|9[y2B&Z21Pj6dn11XWc{n$;M1Omdh]/|jb' );
  #           define( 'LOGGED_IN_KEY',    '-X~.ap8nJ6EZ:ZY,bH-u$,:VXYp{2AwBSkAIs*0s<Ii5::Vq?9(L$ga^T=i!0>6s' );
  #           define( 'NONCE_KEY',        'cDR0zoYrH$O4vnU+C+CTw>3SSK<9,srvOEa=~_&]R/TkXaHC;2O6;!:K?1mS[!ix' );
  #           define( 'AUTH_SALT',        'qAdAOyoj7__liYla6F+.YwntKojNhm]xt6@K22KuN>4{gTX:}l-lA6v4gUc+(s_h' );
  #           define( 'SECURE_AUTH_SALT', 'q^6sVq-p&8Lu_YfPnP{ac5#*(?N*jxC<,;@aH}>!E:1q?o7 u8 oC]S/^6gC_+L<' );
  #           define( 'LOGGED_IN_SALT',   '3V (2HpFP(+8xng>@@|^.f+,Dvs{6)ugiV7bk1[,X&$Wx.y1D8L!9xC=^;MS&[hr' );
  #           define( 'NONCE_SALT',       ')==*:UPNl:rJ6Nnb*.A4N>*.KaI)[>)k+H|6kXqys#H`x);_SKtDp6:rV{n)|_{,' );

  #           /**#@-*/
  #           /**
  #             * WordPress Database Table prefix.
  #             *
  #             * You can have multiple installations in one database if you give each
  #             * a unique prefix. Only numbers, letters, and underscores please!
  #             */
  #           $table_prefix = 'wp_';

  #           /**
  #             * For developers: WordPress debugging mode.
  #             *
  #             * Change this to true to enable the display of notices during development.
  #             * It is strongly recommended that plugin and theme developers use WP_DEBUG
  #             * in their development environments.
  #             *
  #             * For information on other constants that can be used for debugging,
  #             * visit the documentation.
  #             *
  #             * @link https://wordpress.org/support/article/debugging-in-wordpress/
  #             */
  #           define( 'WP_DEBUG', false );

  #           /* That's all, stop editing! Happy publishing. */
  #           /** Absolute path to the WordPress directory. */
  #           if ( ! defined( 'ABSPATH' ) ) {
  #             define( 'ABSPATH', __DIR__ . '/' );
  #           }
  #           /** Sets up WordPress vars and included files. */
  #           require_once ABSPATH . 'wp-settings.php';    
  #   DependsOn: RDSCluster

#####------------AutoScaling, Launch Config, Scaling Plan------------######################
      
  
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      
      VPCZoneIdentifier: 
      # - !Ref PublicSubnet1
      # - !Ref PublicSubnet2
      # - !Ref PublicSubnet3
        - !Ref WebSubnet1
        - !Ref WebSubnet2
        - !Ref WebSubnet3
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: '3'
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroup
    
  
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'      
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            - install_webserver
            - build_cacheclient
            - build_wordpress
            - build_opcache
            - download_aws_ini
            - install_aws_ini
            - install_cacheclient
            - install_wordpress
            - install_opcache
            - start_webserver
        install_webserver:
          packages:
            yum:
              awslogs: []
              httpd24: []
              mysql56: []
              php56: []
              php56-devel: []
              php56-pear: []
              php56-mysqlnd: []
          files:
            /tmp/create_site_conf.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "if [ ! -f /etc/httpd/conf.d/", !Ref WPDirectory, ".conf ]; then\n",                    
                    "   touch /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo 'ServerName 127.0.0.1:80' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo 'DocumentRoot /var/www/wordpress/", !Ref WPDirectory, "' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '<Directory /var/www/wordpress/", !Ref WPDirectory, ">' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  AllowOverride All' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '  Require all granted' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "   echo '</Directory>' >> /etc/httpd/conf.d/", !Ref WPDirectory, ".conf\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        build_cacheclient:
          packages:
            yum:
              gcc-c++: []  
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  pecl install igbinary
                  wget -P /tmp/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/AmazonElastiCacheClusterClient-1.0.0-PHP56-64bit.tgz
                  tar -xf '/tmp/AmazonElastiCacheClusterClient-1.0.0-PHP56-64bit.tgz'
                  cp '/tmp/AmazonElastiCacheClusterClient-1.0.0/amazon-elasticache-cluster-client.so' /usr/lib64/php/5.6/modules/
                  if [ ! -f /etc/php-5.6.d/50-memcached.ini ]; then
                      touch /etc/php-5.6.d/50-memcached.ini
                  fi
                  echo 'extension=igbinary.so;' >> /etc/php-5.6.d/50-memcached.ini
                  echo 'extension=/usr/lib64/php/5.6/modules/amazon-elasticache-cluster-client.so;' >> /etc/php-5.6.d/50-memcached.ini
              mode: 000500
              owner: root
              group: root
        build_opcache:
          packages:
            yum:
              php56-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then                    
                      mkdir -p /var/www/.opcache
                  fi
                  # enable opcache in /etc/php-5.6.d/opcache.ini
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-5.6.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-5.6.d/10-opcache.ini
                  # download opcache-instance.php to verify opcache status
                  if [ ! -f /var/www/wordpress/${WPDirectory}/opcache-instanceid.php ]; then
                      wget -P /var/www/wordpress/${WPDirectory}/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php
                  fi
              mode: 000500
              owner: root
              group: root
        build_wordpress:
          files:
            /tmp/install_wordpress.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -xe\n",
                    "\n",
                    "# install wp-cli\n",
                    "if [ ! -f /bin/wp/wp-cli.phar ]; then\n",
                    "   curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n",
                    "   chmod +x /bin/wp\n",
                    "fi\n",
                    "\n",
                    "# make site directory\n",
                    "if [ ! -d /var/www/wordpress/", !Ref WPDirectory, " ]; then\n",                    
                    "   mkdir -p /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "\n",
                    "   cd /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "   # install wordpress if not installed\n",
                    "   # use public alb host name if wp domain name was empty\n",
                    "   if ! $(wp core is-installed --allow-root); then\n",
                    "       wp core download --version='", !Ref WPVersion, "' --locale='", !Ref WPLocale, "' --allow-root\n",  
                    "       wp core config --dbname='", !Ref DatabaseName, "' --dbuser='", !Ref DatabaseMasterUsername, "' --dbpass='", !Ref DatabaseMasterPassword, "' --dbhost='", !Ref DatabaseClusterEndpointAddress, "' --dbprefix=wp_ --allow-root\n",
                    "       wp core install --url=", !If [ NoWPDomainName, !Ref PublicAlbHostname, !Join [ "", [ "'http://www.", !Ref WPDomainName, "'" ] ] ], " --title='", !Ref WPTitle, "' --admin_user='", !Ref WPAdminUsername, "' --admin_password='", !Ref WPAdminPassword, "' --admin_email='", !Ref WPAdminEmail, "' --skip-email --allow-root\n",
                    "       wp plugin install w3-total-cache\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_HOME', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
                    "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_SITEURL', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
                    "       # enable HTTPS in wp-config.php if ACM Public SSL Certificate parameter was not empty\n",
                            !If [ NoSslCertificate, !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\# No ACM Public SSL Certificate \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] , !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\$_SERVER['HTTPS'] = 'on';\" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] ],
                    "\n",
                    "       # set permissions of wordpress site directories\n", 
                    "       chown -R apache:apache /var/www/wordpress/", !Ref WPDirectory, "\n",
                    "       chmod u+wrx /var/www/wordpress/", !Ref WPDirectory, "/wp-content/*\n",
                    "       if [ ! -f /var/www/wordpress/", !Ref WPDirectory, "/opcache-instanceid.php ]; then\n",
                    "         wget -P /var/www/wordpress/", !Ref WPDirectory, "/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php\n",
                    "       fi\n",
                    "   fi\n",
                    "   RESULT=$?\n",
                    "   if [ $RESULT -eq 0 ]; then\n",
                    "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.initialized\n",
                    "         else\n",
                    "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.failed\n",
                    "   fi\n",
                    "fi\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        download_aws_ini: 
          files:
            /tmp/download_aws_ini.sh:
              content:
                !Join [
                  "",[
                    "#!/bin/bash -x\n",
                    "\n",
                    "wget -P /etc/php-5.6.d/ ", !Ref PHPIniOverride, "\n"
                  ]
                ]
              mode: 000500
              owner: root
              group: root
        install_aws_ini:
          commands:
            install_aws_ini:
              command: ./download_aws_ini.sh
              cwd: /tmp
              ignoreErrors: true
        install_wordpress:
          commands:
            install_wordpress:
              command: ./install_wordpress.sh
              cwd: /tmp
              ignoreErrors: false          
        install_cacheclient:
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            mkdir -p /var/www/wordpress
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/wordpress
            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource WebLaunchConfiguration56 --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}
    # Properties:
    #   #IamInstanceProfile: !Ref WebServerInstanceProfile
    #   ImageId: !Ref AmiID
    #   #SubnetId: !Ref PublicSubnet1                        #change ME
    #   InstanceType: t3.medium
    #   KeyName:
    #     Ref: KeyName
    #   SecurityGroups:                                      #A list that contains the security groups to assign to the instances in the Auto Scaling group
    #     - !Ref WebSecurityGroup
    #   UserData:
    #     Fn::Base64: !Sub  |
    #       # #!/bin/bash -x
    #       # yum update -y
    #       # yum install php php-mysql -y
    #       # yum install httpd24 -y
    #       # process php70-xml
    #       # yum install php70
    #       # amazon-linux-extras install -y php7.2
    #       # cd /var/www/html
    #       # yum install wget -y
    #       # wget https://wordpress.org/wordpress-5.4.1.tar.gz
    #       # tar -xzf wordpress-5.4.1.tar.gz
    #       # cp -r wordpress/* /var/www/html/
    #       # rm -rf wordpress
    #       # rm -rf wordpress-5.4.1.tar.gz
    #       # chmod -R 755 wp-content
    #       # chown -R apache:apache wp-content
    #       # service httpd start
    #       # chkconfig httpd on

    #       #!/bin/bash
    #       yum update -y
    #       yum install -y httpd php
    #       systemctl start httpd
    #       systemctl enable httpd
    #       usermod -a -G apache ec2-user
    #       chown -R ec2-user:apache /var/www
    #       chmod 2775 /var/www
    #       find /var/www -type d -exec chmod 2775 {} \;
    #       find /var/www -type f -exec chmod 0664 {} \;

    #       # PHP script to display Instance ID and Availability Zone
    #       cat << 'EOF' > /var/www/html/index.php
    #         <!DOCTYPE html>
    #         <html>
    #         <body>
    #           <center>

    #             <?php
    #             # Get the instance ID from meta-data and store it in the $instance_id variable
    #             $url = "http://169.254.169.254/latest/meta-data/instance-id";
    #             $instance_id = file_get_contents($url);
    #             # Get the instance's availability zone from metadata and store it in the $zone variable
    #             $url = "http://169.254.169.254/latest/meta-data/placement/availability-zone";
    #             $zone = file_get_contents($url);
    #             ?>

    #             <h2>EC2 Instance ID: <?php echo $instance_id ?></h2>
    #             <h2>Availability Zone: <?php echo $zone ?></h2>

    #           </center>
    #         </body>
    #         </html>
    #       EOF
          
    #       #wp-config.php
    #       cat << 'EOF' > /var/www/html/wp-config.php
    #         <?php
    #         /**
    #           * The base configuration for WordPress
    #           *
    #           * The wp-config.php creation script uses this file during the
    #           * installation. You don't have to use the web site, you can
    #           * copy this file to "wp-config.php" and fill in the values.
    #           *
    #           * This file contains the following configurations:
    #           *
    #           * * MySQL settings
    #           * * Secret keys
    #           * * Database table prefix
    #           * * ABSPATH
    #           *
    #           * @link https://wordpress.org/support/article/editing-wp-config-php/
    #           *
    #           * @package WordPress
    #           */

    #         // ** MySQL settings - You can get this info from your web host ** //
    #         /** The name of the database for WordPress */
    #           define( 'DB_NAME', '${DatabaseName}' );
    #         /** MySQL database username */
    #           define( 'DB_USER', '${DatabaseMasterUsername}' );
    #         /** MySQL database password */
    #           define( 'DB_PASSWORD', '${DatabaseMasterPassword}' );
    #         /** MySQL hostname */
    #           define( 'DB_HOST', '${RDSCluster.Endpoint.Address}' );
    #         /** Database Charset to use in creating database tables. */
    #           define( 'DB_CHARSET', 'utf8mb4' );
    #         /** The Database Collate type. Don't change this if in doubt. */
    #           define( 'DB_COLLATE', '' );
    #         /**#@+
    #           * Authentication Unique Keys and Salts.
    #           *
    #           * Change these to different unique phrases!
    #           * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
    #           * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
    #           *
    #           * @since 2.6.0
    #           */
    #         define( 'AUTH_KEY',         'y6!CxRaZV+TFMr3O)^T a`h#w_z~BTHagddJ2QNqVI)<PQ#%?k1*O*/p76>&2VNz' );
    #         define( 'SECURE_AUTH_KEY',  'Hhdc>3^U|%$H`KV1.K0L_/+%guY,}|9[y2B&Z21Pj6dn11XWc{n$;M1Omdh]/|jb' );
    #         define( 'LOGGED_IN_KEY',    '-X~.ap8nJ6EZ:ZY,bH-u$,:VXYp{2AwBSkAIs*0s<Ii5::Vq?9(L$ga^T=i!0>6s' );
    #         define( 'NONCE_KEY',        'cDR0zoYrH$O4vnU+C+CTw>3SSK<9,srvOEa=~_&]R/TkXaHC;2O6;!:K?1mS[!ix' );
    #         define( 'AUTH_SALT',        'qAdAOyoj7__liYla6F+.YwntKojNhm]xt6@K22KuN>4{gTX:}l-lA6v4gUc+(s_h' );
    #         define( 'SECURE_AUTH_SALT', 'q^6sVq-p&8Lu_YfPnP{ac5#*(?N*jxC<,;@aH}>!E:1q?o7 u8 oC]S/^6gC_+L<' );
    #         define( 'LOGGED_IN_SALT',   '3V (2HpFP(+8xng>@@|^.f+,Dvs{6)ugiV7bk1[,X&$Wx.y1D8L!9xC=^;MS&[hr' );
    #         define( 'NONCE_SALT',       ')==*:UPNl:rJ6Nnb*.A4N>*.KaI)[>)k+H|6kXqys#H`x);_SKtDp6:rV{n)|_{,' );

    #         /**#@-*/
    #         /**
    #           * WordPress Database Table prefix.
    #           *
    #           * You can have multiple installations in one database if you give each
    #           * a unique prefix. Only numbers, letters, and underscores please!
    #           */
    #         $table_prefix = 'wp_';

    #         /**
    #           * For developers: WordPress debugging mode.
    #           *
    #           * Change this to true to enable the display of notices during development.
    #           * It is strongly recommended that plugin and theme developers use WP_DEBUG
    #           * in their development environments.
    #           *
    #           * For information on other constants that can be used for debugging,
    #           * visit the documentation.
    #           *
    #           * @link https://wordpress.org/support/article/debugging-in-wordpress/
    #           */
    #         define( 'WP_DEBUG', false );

    #         /* That's all, stop editing! Happy publishing. */
    #         /** Absolute path to the WordPress directory. */
    #         if ( ! defined( 'ABSPATH' ) ) {
    #           define( 'ABSPATH', __DIR__ . '/' );
    #         }
    #         /** Sets up WordPress vars and included files. */
    #         require_once ABSPATH . 'wp-settings.php';    
    # DependsOn: RDSCluster



      # Type: AWS::AutoScaling::LaunchConfiguration
      # Properties: 
      #   AssociatePublicIpAddress: Boolean
      #   BlockDeviceMappings: 
      #     - BlockDeviceMapping
      #   ClassicLinkVPCId: String
      #   ClassicLinkVPCSecurityGroups: 
      #     - String
      #   EbsOptimized: Boolean
      #   IamInstanceProfile: String
      #   ImageId: String
      #   InstanceId: String
      #   InstanceMonitoring: Boolean
      #   InstanceType: String
      #   KernelId: String
      #   KeyName: String
      #   LaunchConfigurationName: String
      #   PlacementTenancy: String
      #   RamDiskId: String
      #   SecurityGroups: 
      #     - String
      #   SpotPrice: String
      #   UserData: String


      # Type: AWS::AutoScaling::AutoScalingGroup
      # Properties: 
      #   AutoScalingGroupName: String                    #The name of the Auto Scaling group. This name must be unique per Region per account.
      #   AvailabilityZones:                              #You must specify one of the following properties: VPCZoneIdentifier or AvailabilityZones.
      #     - String                                      #list of AZ, Required
      #   Cooldown: String
      #   DesiredCapacity: String                         #initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure automatic scaling.
      #   HealthCheckGracePeriod: Integer                 #ELB health check dependent. amt of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service. Default =0
      #   HealthCheckType: String                         # service to use for healthcheck, 
      #   InstanceId: String                              #optional (if lc/ltemp not provided)  
      #   LaunchConfigurationName: String
      #   LaunchTemplate: 
      #     LaunchTemplateSpecification
      #   LifecycleHookSpecificationList: 
      #     - LifecycleHookSpecification
      #   LoadBalancerNames: 
      #     - String
      #   MaxInstanceLifetime: Integer
      #   MaxSize: String
      #   MetricsCollection: 
      #     - MetricsCollection
      #   MinSize: String
      #   MixedInstancesPolicy: 
      #     MixedInstancesPolicy
      #   NewInstancesProtectedFromScaleIn: Boolean
      #   NotificationConfigurations: 
      #     - NotificationConfiguration
      #   PlacementGroup: String
      #   ServiceLinkedRoleARN: String
      #   Tags: 
      #     - TagProperty
      #   TargetGroupARNs: 
      #     - String
      #   TerminationPolicies: 
      #     - String
      #   VPCZoneIdentifier: 
      #     - String
#-------------------IAM---------------------------------------
  SSMIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # WebServerInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref SSMIAMRole
####----------------LoadBalancer-------------------------------------------------------####
  PublicApplicationLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        # - !Ref PublicSubnet1
        # - !Ref PublicSubnet2
        # - !Ref PublicSubnet3
        - !Ref WebSubnet1
        - !Ref WebSubnet2
        - !Ref WebSubnet3
      SecurityGroups:
      - !Ref WebSecurityGroup                         #The IDs of the security groups for the load balancer.
      #- !Ref PublicAlbSecurityGroup
      Tags:
      - Key: Name
        Value:  'Public ALB' 

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicAlbTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  PublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      #HealthCheckPath: /wp-login.php
      HealthCheckPath: /wp-admin/install.php
      HealthCheckTimeoutSeconds: 5
      Name: 'ALB-TargetGroup'
      Port: 80                      #The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. 
      Protocol: HTTP                #he protocol to use for routing traffic to the targets. For Application Load Balancers, the supported protocols are HTTP and HTTPS.
      #HealthCheckPort
      #HealthCheckProtocol
      Tags:
      - Key: Name
        Value: 'ALB-TargetGroup'
      UnhealthyThresholdCount: 2    #The number of consecutive health check failures required before considering a target unhealthy. For target groups with a protocol of HTTP or HTTPS, the default is 2.
      VpcId: !Ref MyVPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

  
  
  

##################------------------DATABASE-----------------------------###############################
  
    
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterParameterGroupName: 
        Ref: RDSDBClusterParameterGroup
      BackupRetentionPeriod: 30
      DatabaseName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      # KmsKeyId:
      #   !If [ UseAWS-ManagedCMK, !Ref 'AWS::NoValue', !Ref DatabaseCmk ]
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      Port: 3306
      StorageEncrypted: !Ref DatabaseEncrpytedBoolean
      # SnapshotIdentifier: !If [ NoSnapshot, !Ref 'AWS::NoValue', !Ref DatabaseRestoreSnapshot]
      Tags:
        - Key: Name
          Value: RDSCluster
      VpcSecurityGroupIds:
      - !Ref DatabaseSecurityGroup  
  
  RDSDBClusterParameterGroup: # Error Msg- The Parameter Group default.aurora5.6 with DBParameterGroupFamily aurora5.6 cannot be used for this instance. Please use a Parameter Group with DBParameterGroupFamily aurora-mysql5.7 (Service: AmazonRDS; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 147358c4-1e3b-419e-90c9-7a64d7902f46)
    Properties: 
      Description: "CloudFormation Sample Aurora Cluster Parameter Group"
      Family: aurora-mysql5.7 
      Parameters: 
        time_zone: US/Eastern
    Type: "AWS::RDS::DBClusterParameterGroup"
  
  RDSDBParameterGroup: 
    Properties: 
      Description: "CloudFormation Sample Aurora Parameter Group"
      Family: aurora-mysql5.7 
      
    Type: "AWS::RDS::DBParameterGroup"
  
  DatabaseInstance1:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AvailabilityZone: 
        Fn::GetAtt:
          - DataSubnet1
          - AvailabilityZone
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      Tags:
        - Key: Name
          Value: DatabaseInstance1
  
  DatabaseInstance2:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AvailabilityZone: 
        Fn::GetAtt:
          - DataSubnet2
          - AvailabilityZone
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      Tags:
        - Key: Name
          Value: DatabaseInstance2
  DatabaseInstance3:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllowMajorVersionUpgrade: false
      AvailabilityZone: 
        Fn::GetAtt:
          - DataSubnet3
          - AvailabilityZone
      AutoMinorVersionUpgrade: true
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: !Ref DatabaseInstanceType
      DBParameterGroupName: 
        Ref: RDSDBParameterGroup
      DBSubnetGroupName: !Ref DataSubnetGroup
      Engine: aurora-mysql
      Tags:
        - Key: Name
          Value: DatabaseInstance3
  
  DataSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Database Subnet Group for WordPress
      SubnetIds:
        - !Ref DataSubnet1
        - !Ref DataSubnet2
        - !Ref DataSubnet3
        #- !Ref DataSubnet4
      Tags:
        - Key: Name
          Value: DataSubnetGroup









########################################################################################################
Outputs:
  VpcId:
    Value: !Ref MyVPC

  PublicSubnet1:
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Value: !Ref PublicSubnet2
  
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt BastianInstance.PublicIp
  PublicDNS:
    Description: 'Public DNS of EC2 instance'
    Value: !GetAtt BastianInstance.PublicDnsName
  
  # WebServerElasticIP:
  #   Description: 'Elastic IP assigned to bastian instance'
  #   Value: !Ref BastianEIP
  
  WebSubnet1:
    Value: !Ref WebSubnet1
  WebSubnet2:
    Value: !Ref WebSubnet2
  BastionSecurityGroup:
    Value: !Ref BastionSecurityGroup
  PublicAlbSecurityGroup:
    Value: !Ref PublicAlbSecurityGroup
  WebSecurityGroup:
    Value: !Ref WebSecurityGroup
  
  # WebServerPublicDNS:
  #   Description: 'Public DNS of EC2 instance'
  #   Value: !GetAtt WebServerInstance.PublicDnsName

  # WebServerElasticIP:
  #   Description: 'Elastic IP assigned to EC2'
  #   Value: !Ref WebServerEIP

  # WebsiteURL:
  #   Value: !Sub http://${WebServerEIP}
  #   Description: Application URL

  DBEndPoint:
    Value: !GetAtt RDSCluster.Endpoint.Address


  


















########################----Testing-Code-Dump---------###################
  #private
  # PrivateSubnetRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref MyVPC
  #     Tags:
  #       - Key: Name
  #         Value: "Private Route"
        
  # PrivateSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateSubnetRouteTable
  #     SubnetId:
  #       Ref: PrivateSubnet1
  # PrivateSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateSubnetRouteTable
  #     SubnetId:
  #       Ref: PrivateSubnet2
  # 
  #BastianEIP: #got get DNS?
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     InstanceId: !Ref BastianInstance
  #     Tags:
  #       - Key: Name
  #         Value: GovProjectElasticIP





          
  
  # WebServerInstance:
  #   Type: 'AWS::EC2::Instance'
  #   Metadata:
  #     'AWS::CloudFormation::Init':
  #       config:
  #         packages:
  #           yum:
  #             httpd: []
  #             php: []
  #       configSets:
  #         wordpress_install:
  #           - install_cfn
  #           - install_wordpress
  #           - configure_wordpress
  #       install_cfn:
  #         files:
  #           /etc/cfn/cfn-hup.conf:
  #             content: !Join 
  #               - ''
  #               - - |
  #                   [main]
  #                 - stack=
  #                 - !Ref 'AWS::StackId'
  #                 - |+

  #                 - region=
  #                 - !Ref 'AWS::Region'
  #                 - |+

  #             mode: '000400'
  #             owner: root
  #             group: root
  #           /etc/cfn/hooks.d/cfn-auto-reloader.conf:
  #             content: !Join 
  #               - ''
  #               - - |
  #                   [cfn-auto-reloader-hook]
  #                 - |
  #                   triggers=post.update
  #                 - |
  #                   path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
  #                 - 'action=/opt/aws/bin/cfn-init -v '
  #                 - '         --stack '
  #                 - !Ref 'AWS::StackName'
  #                 - '         --resource WebServer '
  #                 - '         --configsets wordpress_install '
  #                 - '         --region '
  #                 - !Ref 'AWS::Region'
  #                 - |+

  #             mode: '000400'
  #             owner: root
  #             group: root
  #         services:
  #           sysvinit:
  #             cfn-hup:
  #               enabled: 'true'
  #               ensureRunning: 'true'
  #               files:
  #                 - /etc/cfn/cfn-hup.conf
  #                 - /etc/cfn/hooks.d/cfn-auto-reloader.conf
  #       install_wordpress:
  #         packages:
  #           yum:
  #             php: []
  #             php-mysql: []
  #             mysql: []
  #             mysql-server: []
  #             mysql-devel: []
  #             mysql-libs: []
  #             httpd: []
  #         sources:
  #           /var/www/html: 'http://wordpress.org/latest.tar.gz'
  #         files:
  #           /tmp/setup.mysql:
  #             content: !Join 
  #               - ''
  #               - - 'CREATE DATABASE '
  #                 - !Ref DBName
  #                 - |
  #                   ;
  #                 - CREATE USER '
  #                 - !Ref DBUser
  #                 - '''@''localhost'' IDENTIFIED BY '''
  #                 - !Ref DBPassword
  #                 - |
  #                   ';
  #                 - 'GRANT ALL ON '
  #                 - !Ref DBName
  #                 - .* TO '
  #                 - !Ref DBUser
  #                 - |
  #                   '@'localhost';
  #                 - |
  #                   FLUSH PRIVILEGES;
  #             mode: '000400'
  #             owner: root
  #             group: root
  #           /tmp/create-wp-config:
  #             content: !Join 
  #               - ''
  #               - - |
  #                   #!/bin/bash -xe
  #                 - >
  #                   cp /var/www/html/wordpress/wp-config-sample.php
  #                   /var/www/html/wordpress/wp-config.php
  #                 - sed -i "s/'database_name_here'/'
  #                 - !Ref DBName
  #                 - |
  #                   '/g" wp-config.php
  #                 - sed -i "s/'username_here'/'
  #                 - !Ref DBUser
  #                 - |
  #                   '/g" wp-config.php
  #                 - sed -i "s/'password_here'/'
  #                 - !Ref DBPassword
  #                 - |
  #                   '/g" wp-config.php
  #             mode: '000500'
  #             owner: root
  #             group: root
  #         services:
  #           sysvinit:
  #             httpd:
  #               enabled: 'true'
  #               ensureRunning: 'true'
  #             mysqld:
  #               enabled: 'true'
  #               ensureRunning: 'true'
  #       configure_wordpress:
  #         commands:
  #           01_set_mysql_root_password:
  #             command: !Join 
  #               - ''
  #               - - mysqladmin -u root password '
  #                 - !Ref DBRootPassword
  #                 - ''''
  #             test: !Join 
  #               - ''
  #               - - '$(mysql '
  #                 - !Ref DBName
  #                 - ' -u root --password='''
  #                 - !Ref DBRootPassword
  #                 - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
  #           02_create_database:
  #             command: !Join 
  #               - ''
  #               - - mysql -u root --password='
  #                 - !Ref DBRootPassword
  #                 - ''' < /tmp/setup.mysql'
  #             test: !Join 
  #               - ''
  #               - - '$(mysql '
  #                 - !Ref DBName
  #                 - ' -u root --password='''
  #                 - !Ref DBRootPassword
  #                 - ''' >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
  #           03_configure_wordpress:
  #             command: /tmp/create-wp-config
  #             cwd: /var/www/html/wordpress
  #   Properties:
  #     ImageId: !Ref AmiID
  #     InstanceType: t3.medium
  #     SecurityGroups:
  #       - !Ref WebSecurityGroup
  #     KeyName: !Ref KeyName
  #     UserData: !Base64 
  #       'Fn::Join':
  #         - ''
  #         - - |
  #             #!/bin/bash -xe
  #           - |
  #             yum install httpd php php-mysql -y
  #           - |
  #             amazon-linux-extras install -y php7.2
  #           - |
  #             yum update -y aws-cfn-bootstrap
  #           - '/opt/aws/bin/cfn-init -v '
  #           - '         --stack '
  #           - !Ref 'AWS::StackName'
  #           - '         --resource WebServerInstance '
  #           - '         --configsets wordpress_install '
  #           - '         --region '
  #           - !Ref 'AWS::Region'
  #           - |+

  #           - '/opt/aws/bin/cfn-signal -e $? '
  #           - '         --stack '
  #           - !Ref 'AWS::StackName'
  #           - '         --resource WebServerInstance '
  #           - '         --region '
  #           - !Ref 'AWS::Region'
  #           - |+

  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M      



  # 
    # RDSCluster:
    #   Type: AWS::RDS::DBCluster
    #   Properties:
    #     BackupRetentionPeriod: 30
    #     DatabaseName: !Ref DatabaseName
    #     DBSubnetGroupName: !Ref DataSubnetGroup
    #     Engine: aurora-mysql
    #     # KmsKeyId:
    #     #   !If [ UseAWS-ManagedCMK, !Ref 'AWS::NoValue', !Ref DatabaseCmk ]
    #     MasterUsername: !Ref DatabaseMasterUsername
    #     MasterUserPassword: !Ref DatabaseMasterPassword
    #     Port: 3306          #The port number on which the DB instances in the DB cluster accept connections.
    #     StorageEncrypted: !Ref DatabaseEncrpytedBoolean
    #     #SnapshotIdentifier: !If [ NoSnapshot, !Ref 'AWS::NoValue', !Ref DatabaseRestoreSnapshot]
    #     Tags:
    #       - Key: Name
    #         Value: RDSCluster
    #     VpcSecurityGroupIds:
    #     - !Ref DatabaseSecurityGroup
        
        # AssociatedRoles: 
        #   - DBClusterRole
        # AvailabilityZones: 
        #   - String
        # BacktrackWindow: Long
        # BackupRetentionPeriod: Integer
        # DBClusterIdentifier: String
        # DBClusterParameterGroupName: String
        #DeletionProtection: Boolean
        # EnableCloudwatchLogsExports: 
        #   - String
        # EnableHttpEndpoint: Boolean
        #EnableIAMDatabaseAuthentication: Boolean
        # EngineMode: String
        # EngineVersion: String
        # PreferredBackupWindow: String
        # PreferredMaintenanceWindow: String
        # ReplicationSourceIdentifier: String
        # RestoreType: String
        # ScalingConfiguration: 
        #   ScalingConfiguration
        # SourceDBClusterIdentifier: String
        # SourceRegion: String
        # StorageEncrypted: Boolean
        # Tags: 
        #   - Tag
        # UseLatestRestorableTime: Boolean
          
      # DatabaseInstance1:
      #   Type: AWS::RDS::DBInstance
      #   DeletionPolicy: Delete
      #   Properties:
      #     AllowMajorVersionUpgrade: false
      #     # AvailabilityZone: 
      #     #   Fn::GetAtt:
      #     #     - DataSubnet1
      #     #     - AvailabilityZone
      #     MultiAZ: true #!Ref MultiAZDatabase
      #     AutoMinorVersionUpgrade: true
      #     #DBClusterIdentifier: !Ref RDSCluster
      #     DBInstanceClass: !Ref DatabaseInstanceType
      #     #DBSubnetGroupName: !Ref DataSubnetGroup
      #     Engine: aurora-mysql
      #     Tags:
      #       - Key: Name
      #         Value: DatabaseInstance1
      #     DBName: !Ref DatabaseName
          
      #     MasterUsername: !Ref DatabaseMasterUsername
      #     MasterUserPassword: !Ref DatabaseMasterPassword
      #     AllocatedStorage: !Ref DBAllocatedStorage
      #     VPCSecurityGroups:
      #       - !GetAtt 
      #         - DatabaseSecurityGroup
      #         - GroupId




      # Metadata:
      # 'AWS::CloudFormation::Init':
      #   config:
      #     packages:
      #       yum:
      #         httpd: []
      #         php: []
      #   configSets:
      #     wordpress_install:
      #       - install_cfn
      #       - install_wordpress
      #   install_cfn:
      #     files:
      #       /etc/cfn/cfn-hup.conf:
      #         content: !Join 
      #           - ''
      #           - - |
      #               [main]
      #             - stack=
      #             - !Ref 'AWS::StackId'
      #             - |+

      #             - region=
      #             - !Ref 'AWS::Region'
      #             - |+

      #         mode: '000400'
      #         owner: root
      #         group: root
      #       /etc/cfn/hooks.d/cfn-auto-reloader.conf:
      #         content: !Join 
      #           - ''
      #           - - |
      #               [cfn-auto-reloader-hook]
      #             - |
      #               triggers=post.update
      #             - |
      #               path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
      #             - 'action=/opt/aws/bin/cfn-init -v '
      #             - '         --stack '
      #             - !Ref 'AWS::StackName'
      #             - '         --resource WebServerInstance '
      #             - '         --configsets wordpress_install '
      #             - '         --region '
      #             - !Ref 'AWS::Region'
      #             - |+

      #         mode: '000400'
      #         owner: root
      #         group: root
      #     services:
      #       sysvinit:
      #         cfn-hup:
      #           enabled: 'true'
      #           ensureRunning: 'true'
      #           files:
      #             - /etc/cfn/cfn-hup.conf
      #             - /etc/cfn/hooks.d/cfn-auto-reloader.conf
      #   install_wordpress:
      #     packages:
      #       yum:
      #         php: []
      #         php-mysql: []
      #         mysql: []
      #         mysql-server: []
      #         mysql-devel: []
      #         mysql-libs: []
      #         httpd: []
      #     sources:
      #       /var/www/html: 'http://wordpress.org/latest.tar.gz'
      #     files:
      #       # /tmp/setup.mysql:
      #       #   content: !Join 
      #       #     - ''
      #       #     - - 'CREATE DATABASE '
      #       #       - !Ref DBName
      #       #       - |
      #       #         ;
      #       #       - CREATE USER '
      #       #       - !Ref DBUser
      #       #       - '''@''localhost'' IDENTIFIED BY '''
      #       #       - !Ref DBPassword
      #       #       - |
      #       #         ';
      #       #       - 'GRANT ALL ON '
      #       #       - !Ref DBName
      #       #       - .* TO '
      #       #       - !Ref DBUser
      #       #       - |
      #       #         '@'localhost';
      #       #       - |
      #       #         FLUSH PRIVILEGES;
      #       #   mode: '000400'
      #       #   owner: root
      #       #   group: root
      #       /tmp/create-wp-config:
      #         content: !Join 
      #           - ''
      #           - - |
      #               #!/bin/bash -xe
      #             - >
      #               cp /var/www/html/wp-config-sample.php
      #               /var/www/html/wp-config.php
      #             - sed -i "s/'database_name_here'/'
      #             - !Ref DatabaseName
      #             - |
      #               '/g" wp-config.php
      #             - sed -i "s/'username_here'/'
      #             - !Ref DatabaseMasterUsername
      #             - |
      #               '/g" wp-config.php
      #             - sed -i "s/'password_here'/'
      #             - !Ref DatabaseMasterPassword
      #             - |
      #               '/g" wp-config.php
      #             - sed -i "s/'localhost'/'
      #             - !GetAtt RDSCluster.Endpoint.Address
      #             - |
      #               '/g" wp-config.php
      #         mode: '000500'
      #         owner: root
      #         group: root
      #     services:
      #       sysvinit:
      #         httpd:
      #           enabled: 'true'
      #           ensureRunning: 'true'
      #         mysqld:
      #           enabled: 'true'
      #           ensureRunning: 'true'

    #   DatabaseInstance4:
    # Type: AWS::RDS::DBInstance
    # DeletionPolicy: Delete
    # Properties:
    #   AllowMajorVersionUpgrade: false
    #   AvailabilityZone: 
    #     Fn::GetAtt:
    #       - DataSubnet4
    #       - AvailabilityZone
    #   AutoMinorVersionUpgrade: true
    #   DBClusterIdentifier: !Ref RDSCluster
    #   DBInstanceClass: !Ref DatabaseInstanceType
    #   DBParameterGroupName: 
    #     Ref: RDSDBParameterGroup
    #   DBSubnetGroupName: !Ref DataSubnetGroup
    #   Engine: aurora-mysql
    #   Tags:
    #     - Key: Name
    #       Value: DatabaseInstance4